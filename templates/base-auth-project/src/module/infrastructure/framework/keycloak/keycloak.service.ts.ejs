import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import KeycloakAdminClient from '@keycloak/keycloak-admin-client';

@Injectable()
export class KeycloakService implements OnModuleInit {
    private readonly logger = new Logger(KeycloakService.name);
    private keycloakAdmin!: KeycloakAdminClient;

    async onModuleInit() {
        this.keycloakAdmin = new KeycloakAdminClient({
            baseUrl: process.env.KEYCLOAK_AUTH_URL,
            realmName: process.env.KEYCLOAK_REALM,
        });

        await this.authenticate();
    }

    private async authenticate() {
        try {
            await this.keycloakAdmin.auth({
                grantType: 'client_credentials',
                clientId: process.env.KEYCLOAK_CLIENT_ID,
                clientSecret: process.env.KEYCLOAK_SECRET,
            });

            this.logger.log('Authenticated with Keycloak Admin');
        } catch (error) {
            this.logger.error('Failed to authenticate with Keycloak', error);
        }
    }

    async createUser(email: string, password: string): Promise<string> {
        await this.authenticate();

        const user = await this.keycloakAdmin.users.create({
            realm: process.env.KEYCLOAK_REALM,
            username: email,
            email,
            enabled: true,
            credentials: [
                {
                    type: 'password',
                    value: password,
                    temporary: false,
                },
            ],
        });

        this.logger.log(`User created in Keycloak with ID: ${user.id}`);
        return user.id!;
    }

    async login(email: string, password: string) {
        return await this.keycloakAdmin.auth({
            username: email,
            password,
            grantType: 'password',
            clientId: process.env.KEYCLOAK_CLIENT_ID,
            clientSecret: process.env.KEYCLOAK_SECRET,
        });
    }

    async logout(userId: string) {
        return this.keycloakAdmin.users.logout({ id: userId });
    }

    async updateUser(userId: string, updates: { email?: string; password?: string }) {
        await this.authenticate();

        // Atualizar e-mail
        if (updates.email) {
            await this.keycloakAdmin.users.update(
                { id: userId, realm: process.env.KEYCLOAK_REALM },
                { email: updates.email, username: updates.email }
            );
        }

        // Atualizar senha
        if (updates.password) {
            await this.keycloakAdmin.users.resetPassword({
                id: userId,
                realm: process.env.KEYCLOAK_REALM,
                credential: {
                    type: 'password',
                    value: updates.password,
                    temporary: false,
                },
            });
        }

        this.logger.log(`Usu√°rio ${userId} atualizado no Keycloak`);
    }

    async deleteUser(userId: string) {
        await this.authenticate();
        await this.keycloakAdmin.users.del({
            id: userId,
            realm: process.env.KEYCLOAK_REALM,
        });
        this.logger.log(`User deleted from Keycloak: ${userId}`);
    }
}